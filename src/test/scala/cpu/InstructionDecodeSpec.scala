package cpu

import chisel3._
import chiseltest._
import org.scalatest.freespec.AnyFreeSpec
import cpu.types.Instruction
import cpu.types.Addressing

class InstructionDecodeSpec extends AnyFreeSpec {
  // (別の表を見ながら順に作り直した...)
  val expectTable: Seq[(Int, (Instruction.Type, Addressing.Type))] = Seq(
    // 0x
    0x00 -> (Instruction.brk, Addressing.implied),
    0x01 -> (Instruction.ora, Addressing.xIndexedIndirect),
    0x02 -> (Instruction.halt, Addressing.invalid),
    0x03 -> (Instruction.slo, Addressing.xIndexedIndirect),
    0x04 -> (Instruction.nop, Addressing.zeroPage),
    0x05 -> (Instruction.ora, Addressing.zeroPage),
    0x06 -> (Instruction.asl, Addressing.zeroPage),
    0x07 -> (Instruction.slo, Addressing.zeroPage),
    0x08 -> (Instruction.php, Addressing.implied),
    0x09 -> (Instruction.ora, Addressing.immediate),
    0x0a -> (Instruction.asl, Addressing.accumulator),
    0x0b -> (Instruction.anc, Addressing.immediate),
    0x0c -> (Instruction.nop, Addressing.absolute),
    0x0d -> (Instruction.ora, Addressing.absolute),
    0x0e -> (Instruction.asl, Addressing.absolute),
    0x0f -> (Instruction.slo, Addressing.absolute),
    // 1x
    0x10 -> (Instruction.bpl, Addressing.relative),
    0x11 -> (Instruction.ora, Addressing.indirectYIndexed),
    0x12 -> (Instruction.halt, Addressing.invalid),
    0x13 -> (Instruction.slo, Addressing.indirectYIndexed),
    0x14 -> (Instruction.nop, Addressing.xIndexedZeroPage),
    0x15 -> (Instruction.ora, Addressing.xIndexedZeroPage),
    0x16 -> (Instruction.asl, Addressing.xIndexedZeroPage),
    0x17 -> (Instruction.slo, Addressing.xIndexedZeroPage),
    0x18 -> (Instruction.clc, Addressing.implied),
    0x19 -> (Instruction.ora, Addressing.yIndexedAbsolute),
    0x1a -> (Instruction.nop, Addressing.implied),
    0x1b -> (Instruction.slo, Addressing.yIndexedAbsolute),
    0x1c -> (Instruction.nop, Addressing.xIndexedAbsolute),
    0x1d -> (Instruction.ora, Addressing.xIndexedAbsolute),
    0x1e -> (Instruction.asl, Addressing.xIndexedAbsolute),
    0x1f -> (Instruction.slo, Addressing.xIndexedAbsolute),
    // 2x
    0x20 -> (Instruction.jsr, Addressing.absolute),
    0x21 -> (Instruction.and, Addressing.xIndexedIndirect),
    0x22 -> (Instruction.halt, Addressing.invalid),
    0x23 -> (Instruction.rla, Addressing.xIndexedIndirect),
    0x24 -> (Instruction.bit, Addressing.zeroPage),
    0x25 -> (Instruction.and, Addressing.zeroPage),
    0x26 -> (Instruction.rol, Addressing.zeroPage),
    0x27 -> (Instruction.rla, Addressing.zeroPage),
    0x28 -> (Instruction.plp, Addressing.implied),
    0x29 -> (Instruction.and, Addressing.immediate),
    0x2a -> (Instruction.rol, Addressing.accumulator),
    0x2b -> (Instruction.anc, Addressing.immediate),
    0x2c -> (Instruction.bit, Addressing.absolute),
    0x2d -> (Instruction.and, Addressing.absolute),
    0x2e -> (Instruction.rol, Addressing.absolute),
    0x2f -> (Instruction.rla, Addressing.absolute),
    // 3x
    0x30 -> (Instruction.bmi, Addressing.relative),
    0x31 -> (Instruction.and, Addressing.indirectYIndexed),
    0x32 -> (Instruction.halt, Addressing.invalid),
    0x33 -> (Instruction.rla, Addressing.indirectYIndexed),
    0x34 -> (Instruction.nop, Addressing.xIndexedZeroPage),
    0x35 -> (Instruction.and, Addressing.xIndexedZeroPage),
    0x36 -> (Instruction.rol, Addressing.xIndexedZeroPage),
    0x37 -> (Instruction.rla, Addressing.xIndexedZeroPage),
    0x38 -> (Instruction.sec, Addressing.implied),
    0x39 -> (Instruction.and, Addressing.yIndexedAbsolute),
    0x3a -> (Instruction.nop, Addressing.implied),
    0x3b -> (Instruction.rla, Addressing.yIndexedAbsolute),
    0x3c -> (Instruction.nop, Addressing.xIndexedAbsolute),
    0x3d -> (Instruction.and, Addressing.xIndexedAbsolute),
    0x3e -> (Instruction.rol, Addressing.xIndexedAbsolute),
    0x3f -> (Instruction.rla, Addressing.xIndexedAbsolute),
    // 4x
    0x40 -> (Instruction.rti, Addressing.implied),
    0x41 -> (Instruction.eor, Addressing.xIndexedIndirect),
    0x42 -> (Instruction.halt, Addressing.invalid),
    0x43 -> (Instruction.sre, Addressing.xIndexedIndirect),
    0x44 -> (Instruction.nop, Addressing.zeroPage),
    0x45 -> (Instruction.eor, Addressing.zeroPage),
    0x46 -> (Instruction.lsr, Addressing.zeroPage),
    0x47 -> (Instruction.sre, Addressing.zeroPage),
    0x48 -> (Instruction.pha, Addressing.implied),
    0x49 -> (Instruction.eor, Addressing.immediate),
    0x4a -> (Instruction.lsr, Addressing.accumulator),
    0x4b -> (Instruction.alr, Addressing.immediate),
    0x4c -> (Instruction.jmp, Addressing.absolute),
    0x4d -> (Instruction.eor, Addressing.absolute),
    0x4e -> (Instruction.lsr, Addressing.absolute),
    0x4f -> (Instruction.sre, Addressing.absolute),
    // 5x
    0x50 -> (Instruction.bvc, Addressing.relative),
    0x51 -> (Instruction.eor, Addressing.indirectYIndexed),
    0x52 -> (Instruction.halt, Addressing.invalid),
    0x53 -> (Instruction.sre, Addressing.indirectYIndexed),
    0x54 -> (Instruction.nop, Addressing.xIndexedZeroPage),
    0x55 -> (Instruction.eor, Addressing.xIndexedZeroPage),
    0x56 -> (Instruction.lsr, Addressing.xIndexedZeroPage),
    0x57 -> (Instruction.sre, Addressing.xIndexedZeroPage),
    0x58 -> (Instruction.cli, Addressing.implied),
    0x59 -> (Instruction.eor, Addressing.yIndexedAbsolute),
    0x5a -> (Instruction.nop, Addressing.implied),
    0x5b -> (Instruction.sre, Addressing.yIndexedAbsolute),
    0x5c -> (Instruction.nop, Addressing.xIndexedAbsolute),
    0x5d -> (Instruction.eor, Addressing.xIndexedAbsolute),
    0x5e -> (Instruction.lsr, Addressing.xIndexedAbsolute),
    0x5f -> (Instruction.sre, Addressing.xIndexedAbsolute),
    // 6x
    0x60 -> (Instruction.rts, Addressing.implied),
    0x61 -> (Instruction.adc, Addressing.xIndexedIndirect),
    0x62 -> (Instruction.halt, Addressing.invalid),
    0x63 -> (Instruction.rra, Addressing.xIndexedIndirect),
    0x64 -> (Instruction.nop, Addressing.zeroPage),
    0x65 -> (Instruction.adc, Addressing.zeroPage),
    0x66 -> (Instruction.ror, Addressing.zeroPage),
    0x67 -> (Instruction.rra, Addressing.zeroPage),
    0x68 -> (Instruction.pla, Addressing.implied),
    0x69 -> (Instruction.adc, Addressing.immediate),
    0x6a -> (Instruction.ror, Addressing.accumulator),
    0x6b -> (Instruction.arr, Addressing.immediate),
    0x6c -> (Instruction.jmp, Addressing.indirect),
    0x6d -> (Instruction.adc, Addressing.absolute),
    0x6e -> (Instruction.ror, Addressing.absolute),
    0x6f -> (Instruction.rra, Addressing.absolute),
    // 7x
    0x70 -> (Instruction.bvs, Addressing.relative),
    0x71 -> (Instruction.adc, Addressing.indirectYIndexed),
    0x72 -> (Instruction.halt, Addressing.invalid),
    0x73 -> (Instruction.rra, Addressing.indirectYIndexed),
    0x74 -> (Instruction.nop, Addressing.xIndexedZeroPage),
    0x75 -> (Instruction.adc, Addressing.xIndexedZeroPage),
    0x76 -> (Instruction.ror, Addressing.xIndexedZeroPage),
    0x77 -> (Instruction.rra, Addressing.xIndexedZeroPage),
    0x78 -> (Instruction.sei, Addressing.implied),
    0x79 -> (Instruction.adc, Addressing.yIndexedAbsolute),
    0x7a -> (Instruction.nop, Addressing.implied),
    0x7b -> (Instruction.rra, Addressing.yIndexedAbsolute),
    0x7c -> (Instruction.nop, Addressing.xIndexedAbsolute),
    0x7d -> (Instruction.adc, Addressing.xIndexedAbsolute),
    0x7e -> (Instruction.ror, Addressing.xIndexedAbsolute),
    0x7f -> (Instruction.rra, Addressing.xIndexedAbsolute),
    // 8x
    0x80 -> (Instruction.nop, Addressing.immediate),
    0x81 -> (Instruction.sta, Addressing.xIndexedIndirect),
    0x82 -> (Instruction.nop, Addressing.immediate),
    0x83 -> (Instruction.sax, Addressing.xIndexedIndirect),
    0x84 -> (Instruction.sty, Addressing.zeroPage),
    0x85 -> (Instruction.sta, Addressing.zeroPage),
    0x86 -> (Instruction.stx, Addressing.zeroPage),
    0x87 -> (Instruction.sax, Addressing.zeroPage),
    0x88 -> (Instruction.dey, Addressing.implied),
    0x89 -> (Instruction.nop, Addressing.immediate),
    0x8a -> (Instruction.txa, Addressing.implied),
    0x8b -> (Instruction.xaa, Addressing.immediate),
    0x8c -> (Instruction.sty, Addressing.absolute),
    0x8d -> (Instruction.sta, Addressing.absolute),
    0x8e -> (Instruction.stx, Addressing.absolute),
    0x8f -> (Instruction.sax, Addressing.absolute),
    // 9x
    0x90 -> (Instruction.bcc, Addressing.relative),
    0x91 -> (Instruction.sta, Addressing.indirectYIndexed),
    0x92 -> (Instruction.halt, Addressing.invalid),
    0x93 -> (Instruction.ahx, Addressing.indirectYIndexed),
    0x94 -> (Instruction.sty, Addressing.xIndexedZeroPage),
    0x95 -> (Instruction.sta, Addressing.xIndexedZeroPage),
    0x96 -> (Instruction.stx, Addressing.yIndexedZeroPage),
    0x97 -> (Instruction.sax, Addressing.yIndexedZeroPage),
    0x98 -> (Instruction.tya, Addressing.implied),
    0x99 -> (Instruction.sta, Addressing.yIndexedAbsolute),
    0x9a -> (Instruction.txs, Addressing.implied),
    0x9b -> (Instruction.tas, Addressing.yIndexedAbsolute),
    0x9c -> (Instruction.shy, Addressing.xIndexedAbsolute),
    0x9d -> (Instruction.sta, Addressing.xIndexedAbsolute),
    0x9e -> (Instruction.shx, Addressing.yIndexedAbsolute),
    0x9f -> (Instruction.ahx, Addressing.yIndexedAbsolute),
    // ax
    0xa0 -> (Instruction.ldy, Addressing.immediate),
    0xa1 -> (Instruction.lda, Addressing.xIndexedIndirect),
    0xa2 -> (Instruction.ldx, Addressing.immediate),
    0xa3 -> (Instruction.lax, Addressing.xIndexedIndirect),
    0xa4 -> (Instruction.ldy, Addressing.zeroPage),
    0xa5 -> (Instruction.lda, Addressing.zeroPage),
    0xa6 -> (Instruction.ldx, Addressing.zeroPage),
    0xa7 -> (Instruction.lax, Addressing.zeroPage),
    0xa8 -> (Instruction.tay, Addressing.implied),
    0xa9 -> (Instruction.lda, Addressing.immediate),
    0xaa -> (Instruction.tax, Addressing.implied),
    0xab -> (Instruction.lax, Addressing.immediate),
    0xac -> (Instruction.ldy, Addressing.absolute),
    0xad -> (Instruction.lda, Addressing.absolute),
    0xae -> (Instruction.ldx, Addressing.absolute),
    0xaf -> (Instruction.lax, Addressing.absolute),
    // bx
    0xb0 -> (Instruction.bcs, Addressing.relative),
    0xb1 -> (Instruction.lda, Addressing.indirectYIndexed),
    0xb2 -> (Instruction.halt, Addressing.invalid),
    0xb3 -> (Instruction.lax, Addressing.indirectYIndexed),
    0xb4 -> (Instruction.ldy, Addressing.xIndexedZeroPage),
    0xb5 -> (Instruction.lda, Addressing.xIndexedZeroPage),
    0xb6 -> (Instruction.ldx, Addressing.yIndexedZeroPage),
    0xb7 -> (Instruction.lax, Addressing.yIndexedZeroPage),
    0xb8 -> (Instruction.clv, Addressing.implied),
    0xb9 -> (Instruction.lda, Addressing.yIndexedAbsolute),
    0xba -> (Instruction.tsx, Addressing.implied),
    0xbb -> (Instruction.las, Addressing.yIndexedAbsolute),
    0xbc -> (Instruction.ldy, Addressing.xIndexedAbsolute),
    0xbd -> (Instruction.lda, Addressing.xIndexedAbsolute),
    0xbe -> (Instruction.ldx, Addressing.yIndexedAbsolute),
    0xbf -> (Instruction.lax, Addressing.yIndexedAbsolute),
    // cx
    0xc0 -> (Instruction.cpy, Addressing.immediate),
    0xc1 -> (Instruction.cmp, Addressing.xIndexedIndirect),
    0xc2 -> (Instruction.nop, Addressing.immediate),
    0xc3 -> (Instruction.dcp, Addressing.xIndexedIndirect),
    0xc4 -> (Instruction.cpy, Addressing.zeroPage),
    0xc5 -> (Instruction.cmp, Addressing.zeroPage),
    0xc6 -> (Instruction.dec, Addressing.zeroPage),
    0xc7 -> (Instruction.dcp, Addressing.zeroPage),
    0xc8 -> (Instruction.iny, Addressing.implied),
    0xc9 -> (Instruction.cmp, Addressing.immediate),
    0xca -> (Instruction.dex, Addressing.implied),
    0xcb -> (Instruction.axs, Addressing.immediate),
    0xcc -> (Instruction.cpy, Addressing.absolute),
    0xcd -> (Instruction.cmp, Addressing.absolute),
    0xce -> (Instruction.dec, Addressing.absolute),
    0xcf -> (Instruction.dcp, Addressing.absolute),
    // dx
    0xd0 -> (Instruction.bne, Addressing.relative),
    0xd1 -> (Instruction.cmp, Addressing.indirectYIndexed),
    0xd2 -> (Instruction.halt, Addressing.invalid),
    0xd3 -> (Instruction.dcp, Addressing.indirectYIndexed),
    0xd4 -> (Instruction.nop, Addressing.xIndexedZeroPage),
    0xd5 -> (Instruction.cmp, Addressing.xIndexedZeroPage),
    0xd6 -> (Instruction.dec, Addressing.xIndexedZeroPage),
    0xd7 -> (Instruction.dcp, Addressing.xIndexedZeroPage),
    0xd8 -> (Instruction.cld, Addressing.implied),
    0xd9 -> (Instruction.cmp, Addressing.yIndexedAbsolute),
    0xda -> (Instruction.nop, Addressing.implied),
    0xdb -> (Instruction.dcp, Addressing.yIndexedAbsolute),
    0xdc -> (Instruction.nop, Addressing.xIndexedAbsolute),
    0xdd -> (Instruction.cmp, Addressing.xIndexedAbsolute),
    0xde -> (Instruction.dec, Addressing.xIndexedAbsolute),
    0xdf -> (Instruction.dcp, Addressing.xIndexedAbsolute),
    // ex
    0xe0 -> (Instruction.cpx, Addressing.immediate),
    0xe1 -> (Instruction.sbc, Addressing.xIndexedIndirect),
    0xe2 -> (Instruction.nop, Addressing.immediate),
    0xe3 -> (Instruction.isc, Addressing.xIndexedIndirect),
    0xe4 -> (Instruction.cpx, Addressing.zeroPage),
    0xe5 -> (Instruction.sbc, Addressing.zeroPage),
    0xe6 -> (Instruction.inc, Addressing.zeroPage),
    0xe7 -> (Instruction.isc, Addressing.zeroPage),
    0xe8 -> (Instruction.inx, Addressing.implied),
    0xe9 -> (Instruction.sbc, Addressing.immediate),
    0xea -> (Instruction.nop, Addressing.implied),
    0xeb -> (Instruction.sbc, Addressing.immediate),
    0xec -> (Instruction.cpx, Addressing.absolute),
    0xed -> (Instruction.sbc, Addressing.absolute),
    0xee -> (Instruction.inc, Addressing.absolute),
    0xef -> (Instruction.isc, Addressing.absolute),
    // fx
    0xf0 -> (Instruction.beq, Addressing.relative),
    0xf1 -> (Instruction.sbc, Addressing.indirectYIndexed),
    0xf2 -> (Instruction.halt, Addressing.invalid),
    0xf3 -> (Instruction.isc, Addressing.indirectYIndexed),
    0xf4 -> (Instruction.nop, Addressing.xIndexedZeroPage),
    0xf5 -> (Instruction.sbc, Addressing.xIndexedZeroPage),
    0xf6 -> (Instruction.inc, Addressing.xIndexedZeroPage),
    0xf7 -> (Instruction.isc, Addressing.xIndexedZeroPage),
    0xf8 -> (Instruction.sed, Addressing.implied),
    0xf9 -> (Instruction.sbc, Addressing.yIndexedAbsolute),
    0xfa -> (Instruction.nop, Addressing.implied),
    0xfb -> (Instruction.isc, Addressing.yIndexedAbsolute),
    0xfc -> (Instruction.nop, Addressing.xIndexedAbsolute),
    0xfd -> (Instruction.sbc, Addressing.xIndexedAbsolute),
    0xfe -> (Instruction.inc, Addressing.xIndexedAbsolute),
    0xff -> (Instruction.isc, Addressing.xIndexedAbsolute),
  )
  // 本家で定義されているテーブル(UIntでMapにすると、論理環境でうまくKeyが見つからなかったので数値に変換)
  val decode: Map[Int, (Instruction.Type, Addressing.Type)] =
    InstructionDecode.lookUpTable.map { case (opcode, data) =>
      (opcode.litValue.toInt -> data)
    }.toMap

  expectTable foreach {
    case (opcode, (expectInst, expectAddressing)) => {
      f"opcode[$opcode%02x] is ($expectInst, $expectAddressing)" in {
        val (inst, addressing) = decode(opcode)
        assert(inst == expectInst)
        assert(addressing == expectAddressing)
      }
    }
  }
}
